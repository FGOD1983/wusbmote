Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_copy_data.o)
                              usbdrv/usbdrv.o (__do_copy_data)
/usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
                              usbdrv/usbdrv.o (__do_clear_bss)
/usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/libc.a(memcmp.o)
                              i2c_gamepad.o (memcmp)

Allocating common symbols
Common symbol       size              file

usbTxBuf            0xb               usbdrv/usbdrv.o
usbTxBuf1           0xb               usbdrv/usbdrv.o
usbDeviceAddr       0x1               usbdrv/usbdrv.o
usbRxToken          0x1               usbdrv/usbdrv.o
usbInputBufOffset   0x1               usbdrv/usbdrv.o
usbMsgPtr           0x2               usbdrv/usbdrv.o
usbRxLen            0x1               usbdrv/usbdrv.o
usbNewDeviceAddr    0x1               usbdrv/usbdrv.o
usbCurrentTok       0x1               usbdrv/usbdrv.o
usbConfiguration    0x1               usbdrv/usbdrv.o
usbRxBuf            0x16              usbdrv/usbdrv.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
LOAD usbdrv/usbdrv.o
LOAD usbdrv/usbdrvasm.o
LOAD usbdrv/oddebug.o
LOAD main.o
LOAD i2c_gamepad.o
LOAD devdesc.o
LOAD i2c.o
LOAD /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0xc1e
 *(.vectors)
 .vectors       0x00000000       0x26 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x00000026       0x32 usbdrv/usbdrv.o
                0x00000026                usbDescriptorString0
                0x0000002a                usbDescriptorStringVendor
                0x00000042                usbDescriptorStringDevice
 .progmem.data  0x00000058        0xa main.o
                0x00000058                usbDescriptorStringSerialNumber
 .progmem.data  0x00000062       0x42 i2c_gamepad.o
 .progmem.data  0x000000a4       0x12 devdesc.o
                0x000000a4                usbDescrDevice
                0x000000b6                . = ALIGN (0x2)
                0x000000b6                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x000000b6        0x0 linker stubs
 *(.trampolines*)
                0x000000b6                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x000000b6                __ctors_start = .
 *(.ctors)
                0x000000b6                __ctors_end = .
                0x000000b6                __dtors_start = .
 *(.dtors)
                0x000000b6                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x000000b6        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
                0x000000b6                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x000000b6        0xc /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x000000c2       0x16 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_copy_data.o)
                0x000000c2                __do_copy_data
 .init4         0x000000d8       0x10 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
                0x000000d8                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000e8        0x4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x000000ec        0x2 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
                0x000000ec                __vector_12
                0x000000ec                __bad_interrupt
                0x000000ec                __vector_6
                0x000000ec                __vector_3
                0x000000ec                __vector_11
                0x000000ec                __vector_13
                0x000000ec                __vector_17
                0x000000ec                __vector_7
                0x000000ec                __vector_5
                0x000000ec                __vector_4
                0x000000ec                __vector_9
                0x000000ec                __vector_2
                0x000000ec                __vector_15
                0x000000ec                __vector_8
                0x000000ec                __vector_14
                0x000000ec                __vector_10
                0x000000ec                __vector_16
                0x000000ec                __vector_18
 .text          0x000000ee      0x282 usbdrv/usbdrv.o
                0x000000ee                usbInit
                0x00000102                usbPoll
                0x0000032a                usbSetInterrupt
 .text          0x00000370      0x300 usbdrv/usbdrvasm.o
                0x00000370                usbCrc16
                0x000003a2                usbCrc16Append
                0x000003aa                __vector_1
 .text          0x00000670        0x0 usbdrv/oddebug.o
 .text          0x00000670      0x248 main.o
                0x00000670                usbFunctionDescriptor
                0x000006cc                usbFunctionSetup
                0x0000072c                transferGamepadReport
                0x00000776                main
 .text          0x000008b8      0x1fc i2c_gamepad.o
                0x000008b8                i2cGamepad_GetGamepad
 .text          0x00000ab4        0x6 devdesc.o
                0x00000ab4                getUsbDescrDevice_size
 .text          0x00000aba      0x146 i2c.o
                0x00000aba                i2c_init
                0x00000ae4                i2c_transaction
 .text          0x00000c00        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 .text          0x00000c00        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_copy_data.o)
 .text          0x00000c00        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
 .text          0x00000c00        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/libc.a(memcmp.o)
                0x00000c00                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00000c00        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x00000c00        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000c00        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x00000c00       0x1a /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/libc.a(memcmp.o)
                0x00000c00                memcmp
                0x00000c1a                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000c1a        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
                0x00000c1a                exit
                0x00000c1a                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000c1a        0x4 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x00000c1e                _etext = .

.data           0x00800060       0x3a load address 0x00000c1e
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
 .data          0x00800060        0x3 usbdrv/usbdrv.o
                0x00800060                usbMsgLen
                0x00800061                usbTxLen
                0x00800062                usbTxLen1
 .data          0x00800063        0x0 usbdrv/usbdrvasm.o
 .data          0x00800063        0x0 usbdrv/oddebug.o
 .data          0x00800063       0x22 main.o
                0x00800063                my_usbDescriptorConfiguration
 .data          0x00800085       0x14 i2c_gamepad.o
                0x00800085                i2cGamepad_Gamepad
 .data          0x00800099        0x0 devdesc.o
 .data          0x00800099        0x0 i2c.o
 .data          0x00800099        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 .data          0x00800099        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_copy_data.o)
 .data          0x00800099        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
 .data          0x00800099        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/libc.a(memcmp.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0080009a                . = ALIGN (0x2)
 *fill*         0x00800099        0x1 00
                0x0080009a                _edata = .
                0x0080009a                PROVIDE (__data_end, .)

.bss            0x0080009a       0x5b
                0x0080009a                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0080009a        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
 .bss           0x0080009a        0x1 usbdrv/usbdrv.o
 .bss           0x0080009b        0x0 usbdrv/usbdrvasm.o
 .bss           0x0080009b        0x0 usbdrv/oddebug.o
 .bss           0x0080009b       0x14 main.o
                0x0080009b                usbDescriptorConfiguration
 .bss           0x008000af       0x11 i2c_gamepad.o
 .bss           0x008000c0        0x0 devdesc.o
 .bss           0x008000c0        0x0 i2c.o
 .bss           0x008000c0        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 .bss           0x008000c0        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_copy_data.o)
 .bss           0x008000c0        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
 .bss           0x008000c0        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/libc.a(memcmp.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x008000c0       0x35 usbdrv/usbdrv.o
                0x008000c0                usbTxBuf
                0x008000cb                usbTxBuf1
                0x008000d6                usbDeviceAddr
                0x008000d7                usbRxToken
                0x008000d8                usbInputBufOffset
                0x008000d9                usbMsgPtr
                0x008000db                usbRxLen
                0x008000dc                usbNewDeviceAddr
                0x008000dd                usbCurrentTok
                0x008000de                usbConfiguration
                0x008000df                usbRxBuf
                0x008000f5                PROVIDE (__bss_end, .)
                0x00000c1e                __data_load_start = LOADADDR (.data)
                0x00000c58                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x008000f5        0x0
                0x008000f5                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x008000f5                PROVIDE (__noinit_end, .)
                0x008000f5                _end = .
                0x008000f5                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000      0x768
 *(.stab)
 .stab          0x00000000      0x6b4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
 .stab          0x000006b4       0xb4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/libc.a(memcmp.o)
                                 0xc0 (size before relaxing)

.stabstr        0x00000000       0x82
 *(.stabstr)
 .stabstr       0x00000000       0x82 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(main.bin elf32-avr)
LOAD linker stubs
